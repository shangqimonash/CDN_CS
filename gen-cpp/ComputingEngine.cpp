/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "ComputingEngine.h"

namespace services {


ComputingEngine_obliv_range_ret_args::~ComputingEngine_obliv_range_ret_args() noexcept {
}


uint32_t ComputingEngine_obliv_range_ret_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->block_list.clear();
            uint32_t _size106;
            ::apache::thrift::protocol::TType _etype109;
            xfer += iprot->readListBegin(_etype109, _size106);
            this->block_list.resize(_size106);
            uint32_t _i110;
            for (_i110 = 0; _i110 < _size106; ++_i110)
            {
              xfer += this->block_list[_i110].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.block_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->token_list_1.clear();
            uint32_t _size111;
            ::apache::thrift::protocol::TType _etype114;
            xfer += iprot->readListBegin(_etype114, _size111);
            this->token_list_1.resize(_size111);
            uint32_t _i115;
            for (_i115 = 0; _i115 < _size111; ++_i115)
            {
              xfer += this->token_list_1[_i115].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.token_list_1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->token_list_2.clear();
            uint32_t _size116;
            ::apache::thrift::protocol::TType _etype119;
            xfer += iprot->readListBegin(_etype119, _size116);
            this->token_list_2.resize(_size116);
            uint32_t _i120;
            for (_i120 = 0; _i120 < _size116; ++_i120)
            {
              xfer += this->token_list_2[_i120].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.token_list_2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->range_index);
          this->__isset.range_index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->batch_size);
          this->__isset.batch_size = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ComputingEngine_obliv_range_ret_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ComputingEngine_obliv_range_ret_args");

  xfer += oprot->writeFieldBegin("block_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->block_list.size()));
    std::vector<tBlock_pos> ::const_iterator _iter121;
    for (_iter121 = this->block_list.begin(); _iter121 != this->block_list.end(); ++_iter121)
    {
      xfer += (*_iter121).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("token_list_1", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->token_list_1.size()));
    std::vector<tMetaRangeRet_p1> ::const_iterator _iter122;
    for (_iter122 = this->token_list_1.begin(); _iter122 != this->token_list_1.end(); ++_iter122)
    {
      xfer += (*_iter122).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("token_list_2", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->token_list_2.size()));
    std::vector<tMetaRangeRet_p2> ::const_iterator _iter123;
    for (_iter123 = this->token_list_2.begin(); _iter123 != this->token_list_2.end(); ++_iter123)
    {
      xfer += (*_iter123).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("range_index", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->range_index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("batch_size", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->batch_size);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


ComputingEngine_obliv_range_ret_pargs::~ComputingEngine_obliv_range_ret_pargs() noexcept {
}


uint32_t ComputingEngine_obliv_range_ret_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ComputingEngine_obliv_range_ret_pargs");

  xfer += oprot->writeFieldBegin("block_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>((*(this->block_list)).size()));
    std::vector<tBlock_pos> ::const_iterator _iter124;
    for (_iter124 = (*(this->block_list)).begin(); _iter124 != (*(this->block_list)).end(); ++_iter124)
    {
      xfer += (*_iter124).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("token_list_1", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>((*(this->token_list_1)).size()));
    std::vector<tMetaRangeRet_p1> ::const_iterator _iter125;
    for (_iter125 = (*(this->token_list_1)).begin(); _iter125 != (*(this->token_list_1)).end(); ++_iter125)
    {
      xfer += (*_iter125).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("token_list_2", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>((*(this->token_list_2)).size()));
    std::vector<tMetaRangeRet_p2> ::const_iterator _iter126;
    for (_iter126 = (*(this->token_list_2)).begin(); _iter126 != (*(this->token_list_2)).end(); ++_iter126)
    {
      xfer += (*_iter126).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("range_index", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((*(this->range_index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("batch_size", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32((*(this->batch_size)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


ComputingEngine_obliv_range_evict_args::~ComputingEngine_obliv_range_evict_args() noexcept {
}


uint32_t ComputingEngine_obliv_range_evict_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->evict_list_1.clear();
            uint32_t _size127;
            ::apache::thrift::protocol::TType _etype130;
            xfer += iprot->readListBegin(_etype130, _size127);
            this->evict_list_1.resize(_size127);
            uint32_t _i131;
            for (_i131 = 0; _i131 < _size127; ++_i131)
            {
              xfer += this->evict_list_1[_i131].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.evict_list_1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->evict_list_2.clear();
            uint32_t _size132;
            ::apache::thrift::protocol::TType _etype135;
            xfer += iprot->readListBegin(_etype135, _size132);
            this->evict_list_2.resize(_size132);
            uint32_t _i136;
            for (_i136 = 0; _i136 < _size132; ++_i136)
            {
              xfer += this->evict_list_2[_i136].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.evict_list_2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->range_index);
          this->__isset.range_index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->batch_size);
          this->__isset.batch_size = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ComputingEngine_obliv_range_evict_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ComputingEngine_obliv_range_evict_args");

  xfer += oprot->writeFieldBegin("evict_list_1", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->evict_list_1.size()));
    std::vector<tMetaOblivEvict> ::const_iterator _iter137;
    for (_iter137 = this->evict_list_1.begin(); _iter137 != this->evict_list_1.end(); ++_iter137)
    {
      xfer += (*_iter137).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("evict_list_2", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->evict_list_2.size()));
    std::vector<tMetaOblivEvict> ::const_iterator _iter138;
    for (_iter138 = this->evict_list_2.begin(); _iter138 != this->evict_list_2.end(); ++_iter138)
    {
      xfer += (*_iter138).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("range_index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->range_index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("batch_size", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->batch_size);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


ComputingEngine_obliv_range_evict_pargs::~ComputingEngine_obliv_range_evict_pargs() noexcept {
}


uint32_t ComputingEngine_obliv_range_evict_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ComputingEngine_obliv_range_evict_pargs");

  xfer += oprot->writeFieldBegin("evict_list_1", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>((*(this->evict_list_1)).size()));
    std::vector<tMetaOblivEvict> ::const_iterator _iter139;
    for (_iter139 = (*(this->evict_list_1)).begin(); _iter139 != (*(this->evict_list_1)).end(); ++_iter139)
    {
      xfer += (*_iter139).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("evict_list_2", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>((*(this->evict_list_2)).size()));
    std::vector<tMetaOblivEvict> ::const_iterator _iter140;
    for (_iter140 = (*(this->evict_list_2)).begin(); _iter140 != (*(this->evict_list_2)).end(); ++_iter140)
    {
      xfer += (*_iter140).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("range_index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->range_index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("batch_size", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((*(this->batch_size)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


ComputingEngine_obliv_permute_re_args::~ComputingEngine_obliv_permute_re_args() noexcept {
}


uint32_t ComputingEngine_obliv_permute_re_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->per_re_list_1.clear();
            uint32_t _size141;
            ::apache::thrift::protocol::TType _etype144;
            xfer += iprot->readListBegin(_etype144, _size141);
            this->per_re_list_1.resize(_size141);
            uint32_t _i145;
            for (_i145 = 0; _i145 < _size141; ++_i145)
            {
              xfer += this->per_re_list_1[_i145].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.per_re_list_1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->per_re_list_2.clear();
            uint32_t _size146;
            ::apache::thrift::protocol::TType _etype149;
            xfer += iprot->readListBegin(_etype149, _size146);
            this->per_re_list_2.resize(_size146);
            uint32_t _i150;
            for (_i150 = 0; _i150 < _size146; ++_i150)
            {
              xfer += this->per_re_list_2[_i150].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.per_re_list_2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->range_index);
          this->__isset.range_index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->stash_size);
          this->__isset.stash_size = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ComputingEngine_obliv_permute_re_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ComputingEngine_obliv_permute_re_args");

  xfer += oprot->writeFieldBegin("per_re_list_1", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->per_re_list_1.size()));
    std::vector<tMetaPerRe> ::const_iterator _iter151;
    for (_iter151 = this->per_re_list_1.begin(); _iter151 != this->per_re_list_1.end(); ++_iter151)
    {
      xfer += (*_iter151).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("per_re_list_2", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->per_re_list_2.size()));
    std::vector<tMetaPerRe> ::const_iterator _iter152;
    for (_iter152 = this->per_re_list_2.begin(); _iter152 != this->per_re_list_2.end(); ++_iter152)
    {
      xfer += (*_iter152).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("range_index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->range_index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("stash_size", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->stash_size);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


ComputingEngine_obliv_permute_re_pargs::~ComputingEngine_obliv_permute_re_pargs() noexcept {
}


uint32_t ComputingEngine_obliv_permute_re_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ComputingEngine_obliv_permute_re_pargs");

  xfer += oprot->writeFieldBegin("per_re_list_1", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>((*(this->per_re_list_1)).size()));
    std::vector<tMetaPerRe> ::const_iterator _iter153;
    for (_iter153 = (*(this->per_re_list_1)).begin(); _iter153 != (*(this->per_re_list_1)).end(); ++_iter153)
    {
      xfer += (*_iter153).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("per_re_list_2", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>((*(this->per_re_list_2)).size()));
    std::vector<tMetaPerRe> ::const_iterator _iter154;
    for (_iter154 = (*(this->per_re_list_2)).begin(); _iter154 != (*(this->per_re_list_2)).end(); ++_iter154)
    {
      xfer += (*_iter154).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("range_index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->range_index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("stash_size", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((*(this->stash_size)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


ComputingEngine_pri_range_retrieve_args::~ComputingEngine_pri_range_retrieve_args() noexcept {
}


uint32_t ComputingEngine_pri_range_retrieve_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->retrieve_list_1.clear();
            uint32_t _size155;
            ::apache::thrift::protocol::TType _etype158;
            xfer += iprot->readListBegin(_etype158, _size155);
            this->retrieve_list_1.resize(_size155);
            uint32_t _i159;
            for (_i159 = 0; _i159 < _size155; ++_i159)
            {
              xfer += this->retrieve_list_1[_i159].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.retrieve_list_1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->retrieve_list_2.clear();
            uint32_t _size160;
            ::apache::thrift::protocol::TType _etype163;
            xfer += iprot->readListBegin(_etype163, _size160);
            this->retrieve_list_2.resize(_size160);
            uint32_t _i164;
            for (_i164 = 0; _i164 < _size160; ++_i164)
            {
              xfer += this->retrieve_list_2[_i164].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.retrieve_list_2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->range_index);
          this->__isset.range_index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->starting_index);
          this->__isset.starting_index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->range_size);
          this->__isset.range_size = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ComputingEngine_pri_range_retrieve_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ComputingEngine_pri_range_retrieve_args");

  xfer += oprot->writeFieldBegin("retrieve_list_1", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->retrieve_list_1.size()));
    std::vector<tMetaPriRangeRet> ::const_iterator _iter165;
    for (_iter165 = this->retrieve_list_1.begin(); _iter165 != this->retrieve_list_1.end(); ++_iter165)
    {
      xfer += (*_iter165).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("retrieve_list_2", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->retrieve_list_2.size()));
    std::vector<tMetaPriRangeRet> ::const_iterator _iter166;
    for (_iter166 = this->retrieve_list_2.begin(); _iter166 != this->retrieve_list_2.end(); ++_iter166)
    {
      xfer += (*_iter166).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("range_index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->range_index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("starting_index", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->starting_index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("range_size", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->range_size);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


ComputingEngine_pri_range_retrieve_pargs::~ComputingEngine_pri_range_retrieve_pargs() noexcept {
}


uint32_t ComputingEngine_pri_range_retrieve_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ComputingEngine_pri_range_retrieve_pargs");

  xfer += oprot->writeFieldBegin("retrieve_list_1", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>((*(this->retrieve_list_1)).size()));
    std::vector<tMetaPriRangeRet> ::const_iterator _iter167;
    for (_iter167 = (*(this->retrieve_list_1)).begin(); _iter167 != (*(this->retrieve_list_1)).end(); ++_iter167)
    {
      xfer += (*_iter167).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("retrieve_list_2", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>((*(this->retrieve_list_2)).size()));
    std::vector<tMetaPriRangeRet> ::const_iterator _iter168;
    for (_iter168 = (*(this->retrieve_list_2)).begin(); _iter168 != (*(this->retrieve_list_2)).end(); ++_iter168)
    {
      xfer += (*_iter168).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("range_index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->range_index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("starting_index", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((*(this->starting_index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("range_size", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32((*(this->range_size)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void ComputingEngineClient::obliv_range_ret(const std::vector<tBlock_pos> & block_list, const std::vector<tMetaRangeRet_p1> & token_list_1, const std::vector<tMetaRangeRet_p2> & token_list_2, const int32_t range_index, const int32_t batch_size)
{
  send_obliv_range_ret(block_list, token_list_1, token_list_2, range_index, batch_size);
}

void ComputingEngineClient::send_obliv_range_ret(const std::vector<tBlock_pos> & block_list, const std::vector<tMetaRangeRet_p1> & token_list_1, const std::vector<tMetaRangeRet_p2> & token_list_2, const int32_t range_index, const int32_t batch_size)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("obliv_range_ret", ::apache::thrift::protocol::T_ONEWAY, cseqid);

  ComputingEngine_obliv_range_ret_pargs args;
  args.block_list = &block_list;
  args.token_list_1 = &token_list_1;
  args.token_list_2 = &token_list_2;
  args.range_index = &range_index;
  args.batch_size = &batch_size;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void ComputingEngineClient::obliv_range_evict(const std::vector<tMetaOblivEvict> & evict_list_1, const std::vector<tMetaOblivEvict> & evict_list_2, const int32_t range_index, const int32_t batch_size)
{
  send_obliv_range_evict(evict_list_1, evict_list_2, range_index, batch_size);
}

void ComputingEngineClient::send_obliv_range_evict(const std::vector<tMetaOblivEvict> & evict_list_1, const std::vector<tMetaOblivEvict> & evict_list_2, const int32_t range_index, const int32_t batch_size)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("obliv_range_evict", ::apache::thrift::protocol::T_ONEWAY, cseqid);

  ComputingEngine_obliv_range_evict_pargs args;
  args.evict_list_1 = &evict_list_1;
  args.evict_list_2 = &evict_list_2;
  args.range_index = &range_index;
  args.batch_size = &batch_size;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void ComputingEngineClient::obliv_permute_re(const std::vector<tMetaPerRe> & per_re_list_1, const std::vector<tMetaPerRe> & per_re_list_2, const int32_t range_index, const int32_t stash_size)
{
  send_obliv_permute_re(per_re_list_1, per_re_list_2, range_index, stash_size);
}

void ComputingEngineClient::send_obliv_permute_re(const std::vector<tMetaPerRe> & per_re_list_1, const std::vector<tMetaPerRe> & per_re_list_2, const int32_t range_index, const int32_t stash_size)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("obliv_permute_re", ::apache::thrift::protocol::T_ONEWAY, cseqid);

  ComputingEngine_obliv_permute_re_pargs args;
  args.per_re_list_1 = &per_re_list_1;
  args.per_re_list_2 = &per_re_list_2;
  args.range_index = &range_index;
  args.stash_size = &stash_size;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void ComputingEngineClient::pri_range_retrieve(const std::vector<tMetaPriRangeRet> & retrieve_list_1, const std::vector<tMetaPriRangeRet> & retrieve_list_2, const int32_t range_index, const int32_t starting_index, const int32_t range_size)
{
  send_pri_range_retrieve(retrieve_list_1, retrieve_list_2, range_index, starting_index, range_size);
}

void ComputingEngineClient::send_pri_range_retrieve(const std::vector<tMetaPriRangeRet> & retrieve_list_1, const std::vector<tMetaPriRangeRet> & retrieve_list_2, const int32_t range_index, const int32_t starting_index, const int32_t range_size)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("pri_range_retrieve", ::apache::thrift::protocol::T_ONEWAY, cseqid);

  ComputingEngine_pri_range_retrieve_pargs args;
  args.retrieve_list_1 = &retrieve_list_1;
  args.retrieve_list_2 = &retrieve_list_2;
  args.range_index = &range_index;
  args.starting_index = &starting_index;
  args.range_size = &range_size;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

bool ComputingEngineProcessor::dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) {
  ProcessMap::iterator pfn;
  pfn = processMap_.find(fname);
  if (pfn == processMap_.end()) {
    iprot->skip(::apache::thrift::protocol::T_STRUCT);
    iprot->readMessageEnd();
    iprot->getTransport()->readEnd();
    ::apache::thrift::TApplicationException x(::apache::thrift::TApplicationException::UNKNOWN_METHOD, "Invalid method name: '"+fname+"'");
    oprot->writeMessageBegin(fname, ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return true;
  }
  (this->*(pfn->second))(seqid, iprot, oprot, callContext);
  return true;
}

void ComputingEngineProcessor::process_obliv_range_ret(int32_t, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol*, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ComputingEngine.obliv_range_ret", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ComputingEngine.obliv_range_ret");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "ComputingEngine.obliv_range_ret");
  }

  ComputingEngine_obliv_range_ret_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "ComputingEngine.obliv_range_ret", bytes);
  }

  try {
    iface_->obliv_range_ret(args.block_list, args.token_list_1, args.token_list_2, args.range_index, args.batch_size);
  } catch (const std::exception&) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "ComputingEngine.obliv_range_ret");
    }
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->asyncComplete(ctx, "ComputingEngine.obliv_range_ret");
  }

  return;
}

void ComputingEngineProcessor::process_obliv_range_evict(int32_t, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol*, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ComputingEngine.obliv_range_evict", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ComputingEngine.obliv_range_evict");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "ComputingEngine.obliv_range_evict");
  }

  ComputingEngine_obliv_range_evict_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "ComputingEngine.obliv_range_evict", bytes);
  }

  try {
    iface_->obliv_range_evict(args.evict_list_1, args.evict_list_2, args.range_index, args.batch_size);
  } catch (const std::exception&) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "ComputingEngine.obliv_range_evict");
    }
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->asyncComplete(ctx, "ComputingEngine.obliv_range_evict");
  }

  return;
}

void ComputingEngineProcessor::process_obliv_permute_re(int32_t, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol*, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ComputingEngine.obliv_permute_re", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ComputingEngine.obliv_permute_re");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "ComputingEngine.obliv_permute_re");
  }

  ComputingEngine_obliv_permute_re_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "ComputingEngine.obliv_permute_re", bytes);
  }

  try {
    iface_->obliv_permute_re(args.per_re_list_1, args.per_re_list_2, args.range_index, args.stash_size);
  } catch (const std::exception&) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "ComputingEngine.obliv_permute_re");
    }
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->asyncComplete(ctx, "ComputingEngine.obliv_permute_re");
  }

  return;
}

void ComputingEngineProcessor::process_pri_range_retrieve(int32_t, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol*, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ComputingEngine.pri_range_retrieve", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ComputingEngine.pri_range_retrieve");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "ComputingEngine.pri_range_retrieve");
  }

  ComputingEngine_pri_range_retrieve_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "ComputingEngine.pri_range_retrieve", bytes);
  }

  try {
    iface_->pri_range_retrieve(args.retrieve_list_1, args.retrieve_list_2, args.range_index, args.starting_index, args.range_size);
  } catch (const std::exception&) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "ComputingEngine.pri_range_retrieve");
    }
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->asyncComplete(ctx, "ComputingEngine.pri_range_retrieve");
  }

  return;
}

::std::shared_ptr< ::apache::thrift::TProcessor > ComputingEngineProcessorFactory::getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) {
  ::apache::thrift::ReleaseHandler< ComputingEngineIfFactory > cleanup(handlerFactory_);
  ::std::shared_ptr< ComputingEngineIf > handler(handlerFactory_->getHandler(connInfo), cleanup);
  ::std::shared_ptr< ::apache::thrift::TProcessor > processor(new ComputingEngineProcessor(handler));
  return processor;
}

void ComputingEngineConcurrentClient::obliv_range_ret(const std::vector<tBlock_pos> & block_list, const std::vector<tMetaRangeRet_p1> & token_list_1, const std::vector<tMetaRangeRet_p2> & token_list_2, const int32_t range_index, const int32_t batch_size)
{
  send_obliv_range_ret(block_list, token_list_1, token_list_2, range_index, batch_size);
}

void ComputingEngineConcurrentClient::send_obliv_range_ret(const std::vector<tBlock_pos> & block_list, const std::vector<tMetaRangeRet_p1> & token_list_1, const std::vector<tMetaRangeRet_p2> & token_list_2, const int32_t range_index, const int32_t batch_size)
{
  int32_t cseqid = 0;
  ::apache::thrift::async::TConcurrentSendSentry sentry(this->sync_.get());
  oprot_->writeMessageBegin("obliv_range_ret", ::apache::thrift::protocol::T_ONEWAY, cseqid);

  ComputingEngine_obliv_range_ret_pargs args;
  args.block_list = &block_list;
  args.token_list_1 = &token_list_1;
  args.token_list_2 = &token_list_2;
  args.range_index = &range_index;
  args.batch_size = &batch_size;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();

  sentry.commit();
}

void ComputingEngineConcurrentClient::obliv_range_evict(const std::vector<tMetaOblivEvict> & evict_list_1, const std::vector<tMetaOblivEvict> & evict_list_2, const int32_t range_index, const int32_t batch_size)
{
  send_obliv_range_evict(evict_list_1, evict_list_2, range_index, batch_size);
}

void ComputingEngineConcurrentClient::send_obliv_range_evict(const std::vector<tMetaOblivEvict> & evict_list_1, const std::vector<tMetaOblivEvict> & evict_list_2, const int32_t range_index, const int32_t batch_size)
{
  int32_t cseqid = 0;
  ::apache::thrift::async::TConcurrentSendSentry sentry(this->sync_.get());
  oprot_->writeMessageBegin("obliv_range_evict", ::apache::thrift::protocol::T_ONEWAY, cseqid);

  ComputingEngine_obliv_range_evict_pargs args;
  args.evict_list_1 = &evict_list_1;
  args.evict_list_2 = &evict_list_2;
  args.range_index = &range_index;
  args.batch_size = &batch_size;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();

  sentry.commit();
}

void ComputingEngineConcurrentClient::obliv_permute_re(const std::vector<tMetaPerRe> & per_re_list_1, const std::vector<tMetaPerRe> & per_re_list_2, const int32_t range_index, const int32_t stash_size)
{
  send_obliv_permute_re(per_re_list_1, per_re_list_2, range_index, stash_size);
}

void ComputingEngineConcurrentClient::send_obliv_permute_re(const std::vector<tMetaPerRe> & per_re_list_1, const std::vector<tMetaPerRe> & per_re_list_2, const int32_t range_index, const int32_t stash_size)
{
  int32_t cseqid = 0;
  ::apache::thrift::async::TConcurrentSendSentry sentry(this->sync_.get());
  oprot_->writeMessageBegin("obliv_permute_re", ::apache::thrift::protocol::T_ONEWAY, cseqid);

  ComputingEngine_obliv_permute_re_pargs args;
  args.per_re_list_1 = &per_re_list_1;
  args.per_re_list_2 = &per_re_list_2;
  args.range_index = &range_index;
  args.stash_size = &stash_size;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();

  sentry.commit();
}

void ComputingEngineConcurrentClient::pri_range_retrieve(const std::vector<tMetaPriRangeRet> & retrieve_list_1, const std::vector<tMetaPriRangeRet> & retrieve_list_2, const int32_t range_index, const int32_t starting_index, const int32_t range_size)
{
  send_pri_range_retrieve(retrieve_list_1, retrieve_list_2, range_index, starting_index, range_size);
}

void ComputingEngineConcurrentClient::send_pri_range_retrieve(const std::vector<tMetaPriRangeRet> & retrieve_list_1, const std::vector<tMetaPriRangeRet> & retrieve_list_2, const int32_t range_index, const int32_t starting_index, const int32_t range_size)
{
  int32_t cseqid = 0;
  ::apache::thrift::async::TConcurrentSendSentry sentry(this->sync_.get());
  oprot_->writeMessageBegin("pri_range_retrieve", ::apache::thrift::protocol::T_ONEWAY, cseqid);

  ComputingEngine_pri_range_retrieve_pargs args;
  args.retrieve_list_1 = &retrieve_list_1;
  args.retrieve_list_2 = &retrieve_list_2;
  args.range_index = &range_index;
  args.starting_index = &starting_index;
  args.range_size = &range_size;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();

  sentry.commit();
}

} // namespace

