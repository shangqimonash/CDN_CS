/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ComputingEngine_H
#define ComputingEngine_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "server_types.h"

namespace services {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class ComputingEngineIf {
 public:
  virtual ~ComputingEngineIf() {}
  virtual void obliv_range_ret(const std::vector<tBlock_pos> & block_list, const std::vector<tMetaRangeRet_p1> & token_list_1, const std::vector<tMetaRangeRet_p2> & token_list_2, const int32_t range_index, const int32_t batch_size) = 0;
  virtual void obliv_range_evict(const std::vector<tMetaOblivEvict> & evict_list_1, const std::vector<tMetaOblivEvict> & evict_list_2, const int32_t range_index, const int32_t batch_size) = 0;
  virtual void obliv_permute_re(const std::vector<tMetaPerRe> & per_re_list_1, const std::vector<tMetaPerRe> & per_re_list_2, const int32_t range_index, const int32_t stash_size) = 0;
  virtual void pri_range_retrieve(const std::vector<tMetaPriRangeRet> & retrieve_list_1, const std::vector<tMetaPriRangeRet> & retrieve_list_2, const int32_t range_index, const int32_t starting_index, const int32_t range_size) = 0;
};

class ComputingEngineIfFactory {
 public:
  typedef ComputingEngineIf Handler;

  virtual ~ComputingEngineIfFactory() {}

  virtual ComputingEngineIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ComputingEngineIf* /* handler */) = 0;
};

class ComputingEngineIfSingletonFactory : virtual public ComputingEngineIfFactory {
 public:
  ComputingEngineIfSingletonFactory(const ::std::shared_ptr<ComputingEngineIf>& iface) : iface_(iface) {}
  virtual ~ComputingEngineIfSingletonFactory() {}

  virtual ComputingEngineIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ComputingEngineIf* /* handler */) {}

 protected:
  ::std::shared_ptr<ComputingEngineIf> iface_;
};

class ComputingEngineNull : virtual public ComputingEngineIf {
 public:
  virtual ~ComputingEngineNull() {}
  void obliv_range_ret(const std::vector<tBlock_pos> & /* block_list */, const std::vector<tMetaRangeRet_p1> & /* token_list_1 */, const std::vector<tMetaRangeRet_p2> & /* token_list_2 */, const int32_t /* range_index */, const int32_t /* batch_size */) {
    return;
  }
  void obliv_range_evict(const std::vector<tMetaOblivEvict> & /* evict_list_1 */, const std::vector<tMetaOblivEvict> & /* evict_list_2 */, const int32_t /* range_index */, const int32_t /* batch_size */) {
    return;
  }
  void obliv_permute_re(const std::vector<tMetaPerRe> & /* per_re_list_1 */, const std::vector<tMetaPerRe> & /* per_re_list_2 */, const int32_t /* range_index */, const int32_t /* stash_size */) {
    return;
  }
  void pri_range_retrieve(const std::vector<tMetaPriRangeRet> & /* retrieve_list_1 */, const std::vector<tMetaPriRangeRet> & /* retrieve_list_2 */, const int32_t /* range_index */, const int32_t /* starting_index */, const int32_t /* range_size */) {
    return;
  }
};

typedef struct _ComputingEngine_obliv_range_ret_args__isset {
  _ComputingEngine_obliv_range_ret_args__isset() : block_list(false), token_list_1(false), token_list_2(false), range_index(false), batch_size(false) {}
  bool block_list :1;
  bool token_list_1 :1;
  bool token_list_2 :1;
  bool range_index :1;
  bool batch_size :1;
} _ComputingEngine_obliv_range_ret_args__isset;

class ComputingEngine_obliv_range_ret_args {
 public:

  ComputingEngine_obliv_range_ret_args(const ComputingEngine_obliv_range_ret_args&);
  ComputingEngine_obliv_range_ret_args& operator=(const ComputingEngine_obliv_range_ret_args&);
  ComputingEngine_obliv_range_ret_args() : range_index(0), batch_size(0) {
  }

  virtual ~ComputingEngine_obliv_range_ret_args() noexcept;
  std::vector<tBlock_pos>  block_list;
  std::vector<tMetaRangeRet_p1>  token_list_1;
  std::vector<tMetaRangeRet_p2>  token_list_2;
  int32_t range_index;
  int32_t batch_size;

  _ComputingEngine_obliv_range_ret_args__isset __isset;

  void __set_block_list(const std::vector<tBlock_pos> & val);

  void __set_token_list_1(const std::vector<tMetaRangeRet_p1> & val);

  void __set_token_list_2(const std::vector<tMetaRangeRet_p2> & val);

  void __set_range_index(const int32_t val);

  void __set_batch_size(const int32_t val);

  bool operator == (const ComputingEngine_obliv_range_ret_args & rhs) const
  {
    if (!(block_list == rhs.block_list))
      return false;
    if (!(token_list_1 == rhs.token_list_1))
      return false;
    if (!(token_list_2 == rhs.token_list_2))
      return false;
    if (!(range_index == rhs.range_index))
      return false;
    if (!(batch_size == rhs.batch_size))
      return false;
    return true;
  }
  bool operator != (const ComputingEngine_obliv_range_ret_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ComputingEngine_obliv_range_ret_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ComputingEngine_obliv_range_ret_pargs {
 public:


  virtual ~ComputingEngine_obliv_range_ret_pargs() noexcept;
  const std::vector<tBlock_pos> * block_list;
  const std::vector<tMetaRangeRet_p1> * token_list_1;
  const std::vector<tMetaRangeRet_p2> * token_list_2;
  const int32_t* range_index;
  const int32_t* batch_size;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ComputingEngine_obliv_range_evict_args__isset {
  _ComputingEngine_obliv_range_evict_args__isset() : evict_list_1(false), evict_list_2(false), range_index(false), batch_size(false) {}
  bool evict_list_1 :1;
  bool evict_list_2 :1;
  bool range_index :1;
  bool batch_size :1;
} _ComputingEngine_obliv_range_evict_args__isset;

class ComputingEngine_obliv_range_evict_args {
 public:

  ComputingEngine_obliv_range_evict_args(const ComputingEngine_obliv_range_evict_args&);
  ComputingEngine_obliv_range_evict_args& operator=(const ComputingEngine_obliv_range_evict_args&);
  ComputingEngine_obliv_range_evict_args() : range_index(0), batch_size(0) {
  }

  virtual ~ComputingEngine_obliv_range_evict_args() noexcept;
  std::vector<tMetaOblivEvict>  evict_list_1;
  std::vector<tMetaOblivEvict>  evict_list_2;
  int32_t range_index;
  int32_t batch_size;

  _ComputingEngine_obliv_range_evict_args__isset __isset;

  void __set_evict_list_1(const std::vector<tMetaOblivEvict> & val);

  void __set_evict_list_2(const std::vector<tMetaOblivEvict> & val);

  void __set_range_index(const int32_t val);

  void __set_batch_size(const int32_t val);

  bool operator == (const ComputingEngine_obliv_range_evict_args & rhs) const
  {
    if (!(evict_list_1 == rhs.evict_list_1))
      return false;
    if (!(evict_list_2 == rhs.evict_list_2))
      return false;
    if (!(range_index == rhs.range_index))
      return false;
    if (!(batch_size == rhs.batch_size))
      return false;
    return true;
  }
  bool operator != (const ComputingEngine_obliv_range_evict_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ComputingEngine_obliv_range_evict_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ComputingEngine_obliv_range_evict_pargs {
 public:


  virtual ~ComputingEngine_obliv_range_evict_pargs() noexcept;
  const std::vector<tMetaOblivEvict> * evict_list_1;
  const std::vector<tMetaOblivEvict> * evict_list_2;
  const int32_t* range_index;
  const int32_t* batch_size;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ComputingEngine_obliv_permute_re_args__isset {
  _ComputingEngine_obliv_permute_re_args__isset() : per_re_list_1(false), per_re_list_2(false), range_index(false), stash_size(false) {}
  bool per_re_list_1 :1;
  bool per_re_list_2 :1;
  bool range_index :1;
  bool stash_size :1;
} _ComputingEngine_obliv_permute_re_args__isset;

class ComputingEngine_obliv_permute_re_args {
 public:

  ComputingEngine_obliv_permute_re_args(const ComputingEngine_obliv_permute_re_args&);
  ComputingEngine_obliv_permute_re_args& operator=(const ComputingEngine_obliv_permute_re_args&);
  ComputingEngine_obliv_permute_re_args() : range_index(0), stash_size(0) {
  }

  virtual ~ComputingEngine_obliv_permute_re_args() noexcept;
  std::vector<tMetaPerRe>  per_re_list_1;
  std::vector<tMetaPerRe>  per_re_list_2;
  int32_t range_index;
  int32_t stash_size;

  _ComputingEngine_obliv_permute_re_args__isset __isset;

  void __set_per_re_list_1(const std::vector<tMetaPerRe> & val);

  void __set_per_re_list_2(const std::vector<tMetaPerRe> & val);

  void __set_range_index(const int32_t val);

  void __set_stash_size(const int32_t val);

  bool operator == (const ComputingEngine_obliv_permute_re_args & rhs) const
  {
    if (!(per_re_list_1 == rhs.per_re_list_1))
      return false;
    if (!(per_re_list_2 == rhs.per_re_list_2))
      return false;
    if (!(range_index == rhs.range_index))
      return false;
    if (!(stash_size == rhs.stash_size))
      return false;
    return true;
  }
  bool operator != (const ComputingEngine_obliv_permute_re_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ComputingEngine_obliv_permute_re_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ComputingEngine_obliv_permute_re_pargs {
 public:


  virtual ~ComputingEngine_obliv_permute_re_pargs() noexcept;
  const std::vector<tMetaPerRe> * per_re_list_1;
  const std::vector<tMetaPerRe> * per_re_list_2;
  const int32_t* range_index;
  const int32_t* stash_size;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ComputingEngine_pri_range_retrieve_args__isset {
  _ComputingEngine_pri_range_retrieve_args__isset() : retrieve_list_1(false), retrieve_list_2(false), range_index(false), starting_index(false), range_size(false) {}
  bool retrieve_list_1 :1;
  bool retrieve_list_2 :1;
  bool range_index :1;
  bool starting_index :1;
  bool range_size :1;
} _ComputingEngine_pri_range_retrieve_args__isset;

class ComputingEngine_pri_range_retrieve_args {
 public:

  ComputingEngine_pri_range_retrieve_args(const ComputingEngine_pri_range_retrieve_args&);
  ComputingEngine_pri_range_retrieve_args& operator=(const ComputingEngine_pri_range_retrieve_args&);
  ComputingEngine_pri_range_retrieve_args() : range_index(0), starting_index(0), range_size(0) {
  }

  virtual ~ComputingEngine_pri_range_retrieve_args() noexcept;
  std::vector<tMetaPriRangeRet>  retrieve_list_1;
  std::vector<tMetaPriRangeRet>  retrieve_list_2;
  int32_t range_index;
  int32_t starting_index;
  int32_t range_size;

  _ComputingEngine_pri_range_retrieve_args__isset __isset;

  void __set_retrieve_list_1(const std::vector<tMetaPriRangeRet> & val);

  void __set_retrieve_list_2(const std::vector<tMetaPriRangeRet> & val);

  void __set_range_index(const int32_t val);

  void __set_starting_index(const int32_t val);

  void __set_range_size(const int32_t val);

  bool operator == (const ComputingEngine_pri_range_retrieve_args & rhs) const
  {
    if (!(retrieve_list_1 == rhs.retrieve_list_1))
      return false;
    if (!(retrieve_list_2 == rhs.retrieve_list_2))
      return false;
    if (!(range_index == rhs.range_index))
      return false;
    if (!(starting_index == rhs.starting_index))
      return false;
    if (!(range_size == rhs.range_size))
      return false;
    return true;
  }
  bool operator != (const ComputingEngine_pri_range_retrieve_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ComputingEngine_pri_range_retrieve_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ComputingEngine_pri_range_retrieve_pargs {
 public:


  virtual ~ComputingEngine_pri_range_retrieve_pargs() noexcept;
  const std::vector<tMetaPriRangeRet> * retrieve_list_1;
  const std::vector<tMetaPriRangeRet> * retrieve_list_2;
  const int32_t* range_index;
  const int32_t* starting_index;
  const int32_t* range_size;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class ComputingEngineClient : virtual public ComputingEngineIf {
 public:
  ComputingEngineClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ComputingEngineClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void obliv_range_ret(const std::vector<tBlock_pos> & block_list, const std::vector<tMetaRangeRet_p1> & token_list_1, const std::vector<tMetaRangeRet_p2> & token_list_2, const int32_t range_index, const int32_t batch_size);
  void send_obliv_range_ret(const std::vector<tBlock_pos> & block_list, const std::vector<tMetaRangeRet_p1> & token_list_1, const std::vector<tMetaRangeRet_p2> & token_list_2, const int32_t range_index, const int32_t batch_size);
  void obliv_range_evict(const std::vector<tMetaOblivEvict> & evict_list_1, const std::vector<tMetaOblivEvict> & evict_list_2, const int32_t range_index, const int32_t batch_size);
  void send_obliv_range_evict(const std::vector<tMetaOblivEvict> & evict_list_1, const std::vector<tMetaOblivEvict> & evict_list_2, const int32_t range_index, const int32_t batch_size);
  void obliv_permute_re(const std::vector<tMetaPerRe> & per_re_list_1, const std::vector<tMetaPerRe> & per_re_list_2, const int32_t range_index, const int32_t stash_size);
  void send_obliv_permute_re(const std::vector<tMetaPerRe> & per_re_list_1, const std::vector<tMetaPerRe> & per_re_list_2, const int32_t range_index, const int32_t stash_size);
  void pri_range_retrieve(const std::vector<tMetaPriRangeRet> & retrieve_list_1, const std::vector<tMetaPriRangeRet> & retrieve_list_2, const int32_t range_index, const int32_t starting_index, const int32_t range_size);
  void send_pri_range_retrieve(const std::vector<tMetaPriRangeRet> & retrieve_list_1, const std::vector<tMetaPriRangeRet> & retrieve_list_2, const int32_t range_index, const int32_t starting_index, const int32_t range_size);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ComputingEngineProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<ComputingEngineIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ComputingEngineProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_obliv_range_ret(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_obliv_range_evict(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_obliv_permute_re(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_pri_range_retrieve(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ComputingEngineProcessor(::std::shared_ptr<ComputingEngineIf> iface) :
    iface_(iface) {
    processMap_["obliv_range_ret"] = &ComputingEngineProcessor::process_obliv_range_ret;
    processMap_["obliv_range_evict"] = &ComputingEngineProcessor::process_obliv_range_evict;
    processMap_["obliv_permute_re"] = &ComputingEngineProcessor::process_obliv_permute_re;
    processMap_["pri_range_retrieve"] = &ComputingEngineProcessor::process_pri_range_retrieve;
  }

  virtual ~ComputingEngineProcessor() {}
};

class ComputingEngineProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ComputingEngineProcessorFactory(const ::std::shared_ptr< ComputingEngineIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< ComputingEngineIfFactory > handlerFactory_;
};

class ComputingEngineMultiface : virtual public ComputingEngineIf {
 public:
  ComputingEngineMultiface(std::vector<std::shared_ptr<ComputingEngineIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ComputingEngineMultiface() {}
 protected:
  std::vector<std::shared_ptr<ComputingEngineIf> > ifaces_;
  ComputingEngineMultiface() {}
  void add(::std::shared_ptr<ComputingEngineIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void obliv_range_ret(const std::vector<tBlock_pos> & block_list, const std::vector<tMetaRangeRet_p1> & token_list_1, const std::vector<tMetaRangeRet_p2> & token_list_2, const int32_t range_index, const int32_t batch_size) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->obliv_range_ret(block_list, token_list_1, token_list_2, range_index, batch_size);
    }
    ifaces_[i]->obliv_range_ret(block_list, token_list_1, token_list_2, range_index, batch_size);
  }

  void obliv_range_evict(const std::vector<tMetaOblivEvict> & evict_list_1, const std::vector<tMetaOblivEvict> & evict_list_2, const int32_t range_index, const int32_t batch_size) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->obliv_range_evict(evict_list_1, evict_list_2, range_index, batch_size);
    }
    ifaces_[i]->obliv_range_evict(evict_list_1, evict_list_2, range_index, batch_size);
  }

  void obliv_permute_re(const std::vector<tMetaPerRe> & per_re_list_1, const std::vector<tMetaPerRe> & per_re_list_2, const int32_t range_index, const int32_t stash_size) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->obliv_permute_re(per_re_list_1, per_re_list_2, range_index, stash_size);
    }
    ifaces_[i]->obliv_permute_re(per_re_list_1, per_re_list_2, range_index, stash_size);
  }

  void pri_range_retrieve(const std::vector<tMetaPriRangeRet> & retrieve_list_1, const std::vector<tMetaPriRangeRet> & retrieve_list_2, const int32_t range_index, const int32_t starting_index, const int32_t range_size) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->pri_range_retrieve(retrieve_list_1, retrieve_list_2, range_index, starting_index, range_size);
    }
    ifaces_[i]->pri_range_retrieve(retrieve_list_1, retrieve_list_2, range_index, starting_index, range_size);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class ComputingEngineConcurrentClient : virtual public ComputingEngineIf {
 public:
  ComputingEngineConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  ComputingEngineConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void obliv_range_ret(const std::vector<tBlock_pos> & block_list, const std::vector<tMetaRangeRet_p1> & token_list_1, const std::vector<tMetaRangeRet_p2> & token_list_2, const int32_t range_index, const int32_t batch_size);
  void send_obliv_range_ret(const std::vector<tBlock_pos> & block_list, const std::vector<tMetaRangeRet_p1> & token_list_1, const std::vector<tMetaRangeRet_p2> & token_list_2, const int32_t range_index, const int32_t batch_size);
  void obliv_range_evict(const std::vector<tMetaOblivEvict> & evict_list_1, const std::vector<tMetaOblivEvict> & evict_list_2, const int32_t range_index, const int32_t batch_size);
  void send_obliv_range_evict(const std::vector<tMetaOblivEvict> & evict_list_1, const std::vector<tMetaOblivEvict> & evict_list_2, const int32_t range_index, const int32_t batch_size);
  void obliv_permute_re(const std::vector<tMetaPerRe> & per_re_list_1, const std::vector<tMetaPerRe> & per_re_list_2, const int32_t range_index, const int32_t stash_size);
  void send_obliv_permute_re(const std::vector<tMetaPerRe> & per_re_list_1, const std::vector<tMetaPerRe> & per_re_list_2, const int32_t range_index, const int32_t stash_size);
  void pri_range_retrieve(const std::vector<tMetaPriRangeRet> & retrieve_list_1, const std::vector<tMetaPriRangeRet> & retrieve_list_2, const int32_t range_index, const int32_t starting_index, const int32_t range_size);
  void send_pri_range_retrieve(const std::vector<tMetaPriRangeRet> & retrieve_list_1, const std::vector<tMetaPriRangeRet> & retrieve_list_2, const int32_t range_index, const int32_t starting_index, const int32_t range_size);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
