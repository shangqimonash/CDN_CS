/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef EdgeServer_H
#define EdgeServer_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "server_types.h"

namespace services {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class EdgeServerIf {
 public:
  virtual ~EdgeServerIf() {}
  virtual void send_data_message(const std::string& data_message) = 0;
  virtual int32_t setup_rORAM_Stash(const int32_t rORAMIndex, const int32_t stashSize, const int32_t rangeSupport) = 0;
  virtual int32_t stash_upload_by_oram_index(const int32_t rORAMIndex, const std::vector<tFullBlockContent> & block_content_list, const int32_t blocknum) = 0;
  virtual void stash_fetch_by_locations(std::vector<tFullBlockContent> & _return, const int32_t rORAMIndex, const std::vector<tPhysicalLocation> & location_list, const int32_t blocknum) = 0;
  virtual void edge_fetch_by_locations(std::vector<tFullBlockContent> & _return, const int32_t rORAMIndex, const std::vector<tPhysicalLocation> & location_list, const int32_t startLeaf, const int32_t blocknum) = 0;
  virtual int32_t edge_upload_by_locations(const int32_t rORAMIndex, const std::vector<tFullBlockContent> & block_content_list, const int32_t startLeaf, const int32_t blocknum) = 0;
};

class EdgeServerIfFactory {
 public:
  typedef EdgeServerIf Handler;

  virtual ~EdgeServerIfFactory() {}

  virtual EdgeServerIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(EdgeServerIf* /* handler */) = 0;
};

class EdgeServerIfSingletonFactory : virtual public EdgeServerIfFactory {
 public:
  EdgeServerIfSingletonFactory(const ::std::shared_ptr<EdgeServerIf>& iface) : iface_(iface) {}
  virtual ~EdgeServerIfSingletonFactory() {}

  virtual EdgeServerIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(EdgeServerIf* /* handler */) {}

 protected:
  ::std::shared_ptr<EdgeServerIf> iface_;
};

class EdgeServerNull : virtual public EdgeServerIf {
 public:
  virtual ~EdgeServerNull() {}
  void send_data_message(const std::string& /* data_message */) {
    return;
  }
  int32_t setup_rORAM_Stash(const int32_t /* rORAMIndex */, const int32_t /* stashSize */, const int32_t /* rangeSupport */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t stash_upload_by_oram_index(const int32_t /* rORAMIndex */, const std::vector<tFullBlockContent> & /* block_content_list */, const int32_t /* blocknum */) {
    int32_t _return = 0;
    return _return;
  }
  void stash_fetch_by_locations(std::vector<tFullBlockContent> & /* _return */, const int32_t /* rORAMIndex */, const std::vector<tPhysicalLocation> & /* location_list */, const int32_t /* blocknum */) {
    return;
  }
  void edge_fetch_by_locations(std::vector<tFullBlockContent> & /* _return */, const int32_t /* rORAMIndex */, const std::vector<tPhysicalLocation> & /* location_list */, const int32_t /* startLeaf */, const int32_t /* blocknum */) {
    return;
  }
  int32_t edge_upload_by_locations(const int32_t /* rORAMIndex */, const std::vector<tFullBlockContent> & /* block_content_list */, const int32_t /* startLeaf */, const int32_t /* blocknum */) {
    int32_t _return = 0;
    return _return;
  }
};

typedef struct _EdgeServer_send_data_message_args__isset {
  _EdgeServer_send_data_message_args__isset() : data_message(false) {}
  bool data_message :1;
} _EdgeServer_send_data_message_args__isset;

class EdgeServer_send_data_message_args {
 public:

  EdgeServer_send_data_message_args(const EdgeServer_send_data_message_args&);
  EdgeServer_send_data_message_args& operator=(const EdgeServer_send_data_message_args&);
  EdgeServer_send_data_message_args() : data_message() {
  }

  virtual ~EdgeServer_send_data_message_args() noexcept;
  std::string data_message;

  _EdgeServer_send_data_message_args__isset __isset;

  void __set_data_message(const std::string& val);

  bool operator == (const EdgeServer_send_data_message_args & rhs) const
  {
    if (!(data_message == rhs.data_message))
      return false;
    return true;
  }
  bool operator != (const EdgeServer_send_data_message_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EdgeServer_send_data_message_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EdgeServer_send_data_message_pargs {
 public:


  virtual ~EdgeServer_send_data_message_pargs() noexcept;
  const std::string* data_message;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EdgeServer_setup_rORAM_Stash_args__isset {
  _EdgeServer_setup_rORAM_Stash_args__isset() : rORAMIndex(false), stashSize(false), rangeSupport(false) {}
  bool rORAMIndex :1;
  bool stashSize :1;
  bool rangeSupport :1;
} _EdgeServer_setup_rORAM_Stash_args__isset;

class EdgeServer_setup_rORAM_Stash_args {
 public:

  EdgeServer_setup_rORAM_Stash_args(const EdgeServer_setup_rORAM_Stash_args&);
  EdgeServer_setup_rORAM_Stash_args& operator=(const EdgeServer_setup_rORAM_Stash_args&);
  EdgeServer_setup_rORAM_Stash_args() : rORAMIndex(0), stashSize(0), rangeSupport(0) {
  }

  virtual ~EdgeServer_setup_rORAM_Stash_args() noexcept;
  int32_t rORAMIndex;
  int32_t stashSize;
  int32_t rangeSupport;

  _EdgeServer_setup_rORAM_Stash_args__isset __isset;

  void __set_rORAMIndex(const int32_t val);

  void __set_stashSize(const int32_t val);

  void __set_rangeSupport(const int32_t val);

  bool operator == (const EdgeServer_setup_rORAM_Stash_args & rhs) const
  {
    if (!(rORAMIndex == rhs.rORAMIndex))
      return false;
    if (!(stashSize == rhs.stashSize))
      return false;
    if (!(rangeSupport == rhs.rangeSupport))
      return false;
    return true;
  }
  bool operator != (const EdgeServer_setup_rORAM_Stash_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EdgeServer_setup_rORAM_Stash_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EdgeServer_setup_rORAM_Stash_pargs {
 public:


  virtual ~EdgeServer_setup_rORAM_Stash_pargs() noexcept;
  const int32_t* rORAMIndex;
  const int32_t* stashSize;
  const int32_t* rangeSupport;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EdgeServer_setup_rORAM_Stash_result__isset {
  _EdgeServer_setup_rORAM_Stash_result__isset() : success(false) {}
  bool success :1;
} _EdgeServer_setup_rORAM_Stash_result__isset;

class EdgeServer_setup_rORAM_Stash_result {
 public:

  EdgeServer_setup_rORAM_Stash_result(const EdgeServer_setup_rORAM_Stash_result&);
  EdgeServer_setup_rORAM_Stash_result& operator=(const EdgeServer_setup_rORAM_Stash_result&);
  EdgeServer_setup_rORAM_Stash_result() : success(0) {
  }

  virtual ~EdgeServer_setup_rORAM_Stash_result() noexcept;
  int32_t success;

  _EdgeServer_setup_rORAM_Stash_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const EdgeServer_setup_rORAM_Stash_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const EdgeServer_setup_rORAM_Stash_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EdgeServer_setup_rORAM_Stash_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EdgeServer_setup_rORAM_Stash_presult__isset {
  _EdgeServer_setup_rORAM_Stash_presult__isset() : success(false) {}
  bool success :1;
} _EdgeServer_setup_rORAM_Stash_presult__isset;

class EdgeServer_setup_rORAM_Stash_presult {
 public:


  virtual ~EdgeServer_setup_rORAM_Stash_presult() noexcept;
  int32_t* success;

  _EdgeServer_setup_rORAM_Stash_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _EdgeServer_stash_upload_by_oram_index_args__isset {
  _EdgeServer_stash_upload_by_oram_index_args__isset() : rORAMIndex(false), block_content_list(false), blocknum(false) {}
  bool rORAMIndex :1;
  bool block_content_list :1;
  bool blocknum :1;
} _EdgeServer_stash_upload_by_oram_index_args__isset;

class EdgeServer_stash_upload_by_oram_index_args {
 public:

  EdgeServer_stash_upload_by_oram_index_args(const EdgeServer_stash_upload_by_oram_index_args&);
  EdgeServer_stash_upload_by_oram_index_args& operator=(const EdgeServer_stash_upload_by_oram_index_args&);
  EdgeServer_stash_upload_by_oram_index_args() : rORAMIndex(0), blocknum(0) {
  }

  virtual ~EdgeServer_stash_upload_by_oram_index_args() noexcept;
  int32_t rORAMIndex;
  std::vector<tFullBlockContent>  block_content_list;
  int32_t blocknum;

  _EdgeServer_stash_upload_by_oram_index_args__isset __isset;

  void __set_rORAMIndex(const int32_t val);

  void __set_block_content_list(const std::vector<tFullBlockContent> & val);

  void __set_blocknum(const int32_t val);

  bool operator == (const EdgeServer_stash_upload_by_oram_index_args & rhs) const
  {
    if (!(rORAMIndex == rhs.rORAMIndex))
      return false;
    if (!(block_content_list == rhs.block_content_list))
      return false;
    if (!(blocknum == rhs.blocknum))
      return false;
    return true;
  }
  bool operator != (const EdgeServer_stash_upload_by_oram_index_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EdgeServer_stash_upload_by_oram_index_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EdgeServer_stash_upload_by_oram_index_pargs {
 public:


  virtual ~EdgeServer_stash_upload_by_oram_index_pargs() noexcept;
  const int32_t* rORAMIndex;
  const std::vector<tFullBlockContent> * block_content_list;
  const int32_t* blocknum;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EdgeServer_stash_upload_by_oram_index_result__isset {
  _EdgeServer_stash_upload_by_oram_index_result__isset() : success(false) {}
  bool success :1;
} _EdgeServer_stash_upload_by_oram_index_result__isset;

class EdgeServer_stash_upload_by_oram_index_result {
 public:

  EdgeServer_stash_upload_by_oram_index_result(const EdgeServer_stash_upload_by_oram_index_result&);
  EdgeServer_stash_upload_by_oram_index_result& operator=(const EdgeServer_stash_upload_by_oram_index_result&);
  EdgeServer_stash_upload_by_oram_index_result() : success(0) {
  }

  virtual ~EdgeServer_stash_upload_by_oram_index_result() noexcept;
  int32_t success;

  _EdgeServer_stash_upload_by_oram_index_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const EdgeServer_stash_upload_by_oram_index_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const EdgeServer_stash_upload_by_oram_index_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EdgeServer_stash_upload_by_oram_index_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EdgeServer_stash_upload_by_oram_index_presult__isset {
  _EdgeServer_stash_upload_by_oram_index_presult__isset() : success(false) {}
  bool success :1;
} _EdgeServer_stash_upload_by_oram_index_presult__isset;

class EdgeServer_stash_upload_by_oram_index_presult {
 public:


  virtual ~EdgeServer_stash_upload_by_oram_index_presult() noexcept;
  int32_t* success;

  _EdgeServer_stash_upload_by_oram_index_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _EdgeServer_stash_fetch_by_locations_args__isset {
  _EdgeServer_stash_fetch_by_locations_args__isset() : rORAMIndex(false), location_list(false), blocknum(false) {}
  bool rORAMIndex :1;
  bool location_list :1;
  bool blocknum :1;
} _EdgeServer_stash_fetch_by_locations_args__isset;

class EdgeServer_stash_fetch_by_locations_args {
 public:

  EdgeServer_stash_fetch_by_locations_args(const EdgeServer_stash_fetch_by_locations_args&);
  EdgeServer_stash_fetch_by_locations_args& operator=(const EdgeServer_stash_fetch_by_locations_args&);
  EdgeServer_stash_fetch_by_locations_args() : rORAMIndex(0), blocknum(0) {
  }

  virtual ~EdgeServer_stash_fetch_by_locations_args() noexcept;
  int32_t rORAMIndex;
  std::vector<tPhysicalLocation>  location_list;
  int32_t blocknum;

  _EdgeServer_stash_fetch_by_locations_args__isset __isset;

  void __set_rORAMIndex(const int32_t val);

  void __set_location_list(const std::vector<tPhysicalLocation> & val);

  void __set_blocknum(const int32_t val);

  bool operator == (const EdgeServer_stash_fetch_by_locations_args & rhs) const
  {
    if (!(rORAMIndex == rhs.rORAMIndex))
      return false;
    if (!(location_list == rhs.location_list))
      return false;
    if (!(blocknum == rhs.blocknum))
      return false;
    return true;
  }
  bool operator != (const EdgeServer_stash_fetch_by_locations_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EdgeServer_stash_fetch_by_locations_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EdgeServer_stash_fetch_by_locations_pargs {
 public:


  virtual ~EdgeServer_stash_fetch_by_locations_pargs() noexcept;
  const int32_t* rORAMIndex;
  const std::vector<tPhysicalLocation> * location_list;
  const int32_t* blocknum;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EdgeServer_stash_fetch_by_locations_result__isset {
  _EdgeServer_stash_fetch_by_locations_result__isset() : success(false) {}
  bool success :1;
} _EdgeServer_stash_fetch_by_locations_result__isset;

class EdgeServer_stash_fetch_by_locations_result {
 public:

  EdgeServer_stash_fetch_by_locations_result(const EdgeServer_stash_fetch_by_locations_result&);
  EdgeServer_stash_fetch_by_locations_result& operator=(const EdgeServer_stash_fetch_by_locations_result&);
  EdgeServer_stash_fetch_by_locations_result() {
  }

  virtual ~EdgeServer_stash_fetch_by_locations_result() noexcept;
  std::vector<tFullBlockContent>  success;

  _EdgeServer_stash_fetch_by_locations_result__isset __isset;

  void __set_success(const std::vector<tFullBlockContent> & val);

  bool operator == (const EdgeServer_stash_fetch_by_locations_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const EdgeServer_stash_fetch_by_locations_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EdgeServer_stash_fetch_by_locations_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EdgeServer_stash_fetch_by_locations_presult__isset {
  _EdgeServer_stash_fetch_by_locations_presult__isset() : success(false) {}
  bool success :1;
} _EdgeServer_stash_fetch_by_locations_presult__isset;

class EdgeServer_stash_fetch_by_locations_presult {
 public:


  virtual ~EdgeServer_stash_fetch_by_locations_presult() noexcept;
  std::vector<tFullBlockContent> * success;

  _EdgeServer_stash_fetch_by_locations_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _EdgeServer_edge_fetch_by_locations_args__isset {
  _EdgeServer_edge_fetch_by_locations_args__isset() : rORAMIndex(false), location_list(false), startLeaf(false), blocknum(false) {}
  bool rORAMIndex :1;
  bool location_list :1;
  bool startLeaf :1;
  bool blocknum :1;
} _EdgeServer_edge_fetch_by_locations_args__isset;

class EdgeServer_edge_fetch_by_locations_args {
 public:

  EdgeServer_edge_fetch_by_locations_args(const EdgeServer_edge_fetch_by_locations_args&);
  EdgeServer_edge_fetch_by_locations_args& operator=(const EdgeServer_edge_fetch_by_locations_args&);
  EdgeServer_edge_fetch_by_locations_args() : rORAMIndex(0), startLeaf(0), blocknum(0) {
  }

  virtual ~EdgeServer_edge_fetch_by_locations_args() noexcept;
  int32_t rORAMIndex;
  std::vector<tPhysicalLocation>  location_list;
  int32_t startLeaf;
  int32_t blocknum;

  _EdgeServer_edge_fetch_by_locations_args__isset __isset;

  void __set_rORAMIndex(const int32_t val);

  void __set_location_list(const std::vector<tPhysicalLocation> & val);

  void __set_startLeaf(const int32_t val);

  void __set_blocknum(const int32_t val);

  bool operator == (const EdgeServer_edge_fetch_by_locations_args & rhs) const
  {
    if (!(rORAMIndex == rhs.rORAMIndex))
      return false;
    if (!(location_list == rhs.location_list))
      return false;
    if (!(startLeaf == rhs.startLeaf))
      return false;
    if (!(blocknum == rhs.blocknum))
      return false;
    return true;
  }
  bool operator != (const EdgeServer_edge_fetch_by_locations_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EdgeServer_edge_fetch_by_locations_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EdgeServer_edge_fetch_by_locations_pargs {
 public:


  virtual ~EdgeServer_edge_fetch_by_locations_pargs() noexcept;
  const int32_t* rORAMIndex;
  const std::vector<tPhysicalLocation> * location_list;
  const int32_t* startLeaf;
  const int32_t* blocknum;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EdgeServer_edge_fetch_by_locations_result__isset {
  _EdgeServer_edge_fetch_by_locations_result__isset() : success(false) {}
  bool success :1;
} _EdgeServer_edge_fetch_by_locations_result__isset;

class EdgeServer_edge_fetch_by_locations_result {
 public:

  EdgeServer_edge_fetch_by_locations_result(const EdgeServer_edge_fetch_by_locations_result&);
  EdgeServer_edge_fetch_by_locations_result& operator=(const EdgeServer_edge_fetch_by_locations_result&);
  EdgeServer_edge_fetch_by_locations_result() {
  }

  virtual ~EdgeServer_edge_fetch_by_locations_result() noexcept;
  std::vector<tFullBlockContent>  success;

  _EdgeServer_edge_fetch_by_locations_result__isset __isset;

  void __set_success(const std::vector<tFullBlockContent> & val);

  bool operator == (const EdgeServer_edge_fetch_by_locations_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const EdgeServer_edge_fetch_by_locations_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EdgeServer_edge_fetch_by_locations_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EdgeServer_edge_fetch_by_locations_presult__isset {
  _EdgeServer_edge_fetch_by_locations_presult__isset() : success(false) {}
  bool success :1;
} _EdgeServer_edge_fetch_by_locations_presult__isset;

class EdgeServer_edge_fetch_by_locations_presult {
 public:


  virtual ~EdgeServer_edge_fetch_by_locations_presult() noexcept;
  std::vector<tFullBlockContent> * success;

  _EdgeServer_edge_fetch_by_locations_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _EdgeServer_edge_upload_by_locations_args__isset {
  _EdgeServer_edge_upload_by_locations_args__isset() : rORAMIndex(false), block_content_list(false), startLeaf(false), blocknum(false) {}
  bool rORAMIndex :1;
  bool block_content_list :1;
  bool startLeaf :1;
  bool blocknum :1;
} _EdgeServer_edge_upload_by_locations_args__isset;

class EdgeServer_edge_upload_by_locations_args {
 public:

  EdgeServer_edge_upload_by_locations_args(const EdgeServer_edge_upload_by_locations_args&);
  EdgeServer_edge_upload_by_locations_args& operator=(const EdgeServer_edge_upload_by_locations_args&);
  EdgeServer_edge_upload_by_locations_args() : rORAMIndex(0), startLeaf(0), blocknum(0) {
  }

  virtual ~EdgeServer_edge_upload_by_locations_args() noexcept;
  int32_t rORAMIndex;
  std::vector<tFullBlockContent>  block_content_list;
  int32_t startLeaf;
  int32_t blocknum;

  _EdgeServer_edge_upload_by_locations_args__isset __isset;

  void __set_rORAMIndex(const int32_t val);

  void __set_block_content_list(const std::vector<tFullBlockContent> & val);

  void __set_startLeaf(const int32_t val);

  void __set_blocknum(const int32_t val);

  bool operator == (const EdgeServer_edge_upload_by_locations_args & rhs) const
  {
    if (!(rORAMIndex == rhs.rORAMIndex))
      return false;
    if (!(block_content_list == rhs.block_content_list))
      return false;
    if (!(startLeaf == rhs.startLeaf))
      return false;
    if (!(blocknum == rhs.blocknum))
      return false;
    return true;
  }
  bool operator != (const EdgeServer_edge_upload_by_locations_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EdgeServer_edge_upload_by_locations_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EdgeServer_edge_upload_by_locations_pargs {
 public:


  virtual ~EdgeServer_edge_upload_by_locations_pargs() noexcept;
  const int32_t* rORAMIndex;
  const std::vector<tFullBlockContent> * block_content_list;
  const int32_t* startLeaf;
  const int32_t* blocknum;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EdgeServer_edge_upload_by_locations_result__isset {
  _EdgeServer_edge_upload_by_locations_result__isset() : success(false) {}
  bool success :1;
} _EdgeServer_edge_upload_by_locations_result__isset;

class EdgeServer_edge_upload_by_locations_result {
 public:

  EdgeServer_edge_upload_by_locations_result(const EdgeServer_edge_upload_by_locations_result&);
  EdgeServer_edge_upload_by_locations_result& operator=(const EdgeServer_edge_upload_by_locations_result&);
  EdgeServer_edge_upload_by_locations_result() : success(0) {
  }

  virtual ~EdgeServer_edge_upload_by_locations_result() noexcept;
  int32_t success;

  _EdgeServer_edge_upload_by_locations_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const EdgeServer_edge_upload_by_locations_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const EdgeServer_edge_upload_by_locations_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EdgeServer_edge_upload_by_locations_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EdgeServer_edge_upload_by_locations_presult__isset {
  _EdgeServer_edge_upload_by_locations_presult__isset() : success(false) {}
  bool success :1;
} _EdgeServer_edge_upload_by_locations_presult__isset;

class EdgeServer_edge_upload_by_locations_presult {
 public:


  virtual ~EdgeServer_edge_upload_by_locations_presult() noexcept;
  int32_t* success;

  _EdgeServer_edge_upload_by_locations_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class EdgeServerClient : virtual public EdgeServerIf {
 public:
  EdgeServerClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  EdgeServerClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void send_data_message(const std::string& data_message);
  void send_send_data_message(const std::string& data_message);
  int32_t setup_rORAM_Stash(const int32_t rORAMIndex, const int32_t stashSize, const int32_t rangeSupport);
  void send_setup_rORAM_Stash(const int32_t rORAMIndex, const int32_t stashSize, const int32_t rangeSupport);
  int32_t recv_setup_rORAM_Stash();
  int32_t stash_upload_by_oram_index(const int32_t rORAMIndex, const std::vector<tFullBlockContent> & block_content_list, const int32_t blocknum);
  void send_stash_upload_by_oram_index(const int32_t rORAMIndex, const std::vector<tFullBlockContent> & block_content_list, const int32_t blocknum);
  int32_t recv_stash_upload_by_oram_index();
  void stash_fetch_by_locations(std::vector<tFullBlockContent> & _return, const int32_t rORAMIndex, const std::vector<tPhysicalLocation> & location_list, const int32_t blocknum);
  void send_stash_fetch_by_locations(const int32_t rORAMIndex, const std::vector<tPhysicalLocation> & location_list, const int32_t blocknum);
  void recv_stash_fetch_by_locations(std::vector<tFullBlockContent> & _return);
  void edge_fetch_by_locations(std::vector<tFullBlockContent> & _return, const int32_t rORAMIndex, const std::vector<tPhysicalLocation> & location_list, const int32_t startLeaf, const int32_t blocknum);
  void send_edge_fetch_by_locations(const int32_t rORAMIndex, const std::vector<tPhysicalLocation> & location_list, const int32_t startLeaf, const int32_t blocknum);
  void recv_edge_fetch_by_locations(std::vector<tFullBlockContent> & _return);
  int32_t edge_upload_by_locations(const int32_t rORAMIndex, const std::vector<tFullBlockContent> & block_content_list, const int32_t startLeaf, const int32_t blocknum);
  void send_edge_upload_by_locations(const int32_t rORAMIndex, const std::vector<tFullBlockContent> & block_content_list, const int32_t startLeaf, const int32_t blocknum);
  int32_t recv_edge_upload_by_locations();
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class EdgeServerProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<EdgeServerIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (EdgeServerProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_send_data_message(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setup_rORAM_Stash(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_stash_upload_by_oram_index(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_stash_fetch_by_locations(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_edge_fetch_by_locations(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_edge_upload_by_locations(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  EdgeServerProcessor(::std::shared_ptr<EdgeServerIf> iface) :
    iface_(iface) {
    processMap_["send_data_message"] = &EdgeServerProcessor::process_send_data_message;
    processMap_["setup_rORAM_Stash"] = &EdgeServerProcessor::process_setup_rORAM_Stash;
    processMap_["stash_upload_by_oram_index"] = &EdgeServerProcessor::process_stash_upload_by_oram_index;
    processMap_["stash_fetch_by_locations"] = &EdgeServerProcessor::process_stash_fetch_by_locations;
    processMap_["edge_fetch_by_locations"] = &EdgeServerProcessor::process_edge_fetch_by_locations;
    processMap_["edge_upload_by_locations"] = &EdgeServerProcessor::process_edge_upload_by_locations;
  }

  virtual ~EdgeServerProcessor() {}
};

class EdgeServerProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  EdgeServerProcessorFactory(const ::std::shared_ptr< EdgeServerIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< EdgeServerIfFactory > handlerFactory_;
};

class EdgeServerMultiface : virtual public EdgeServerIf {
 public:
  EdgeServerMultiface(std::vector<std::shared_ptr<EdgeServerIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~EdgeServerMultiface() {}
 protected:
  std::vector<std::shared_ptr<EdgeServerIf> > ifaces_;
  EdgeServerMultiface() {}
  void add(::std::shared_ptr<EdgeServerIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void send_data_message(const std::string& data_message) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->send_data_message(data_message);
    }
    ifaces_[i]->send_data_message(data_message);
  }

  int32_t setup_rORAM_Stash(const int32_t rORAMIndex, const int32_t stashSize, const int32_t rangeSupport) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setup_rORAM_Stash(rORAMIndex, stashSize, rangeSupport);
    }
    return ifaces_[i]->setup_rORAM_Stash(rORAMIndex, stashSize, rangeSupport);
  }

  int32_t stash_upload_by_oram_index(const int32_t rORAMIndex, const std::vector<tFullBlockContent> & block_content_list, const int32_t blocknum) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->stash_upload_by_oram_index(rORAMIndex, block_content_list, blocknum);
    }
    return ifaces_[i]->stash_upload_by_oram_index(rORAMIndex, block_content_list, blocknum);
  }

  void stash_fetch_by_locations(std::vector<tFullBlockContent> & _return, const int32_t rORAMIndex, const std::vector<tPhysicalLocation> & location_list, const int32_t blocknum) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->stash_fetch_by_locations(_return, rORAMIndex, location_list, blocknum);
    }
    ifaces_[i]->stash_fetch_by_locations(_return, rORAMIndex, location_list, blocknum);
    return;
  }

  void edge_fetch_by_locations(std::vector<tFullBlockContent> & _return, const int32_t rORAMIndex, const std::vector<tPhysicalLocation> & location_list, const int32_t startLeaf, const int32_t blocknum) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->edge_fetch_by_locations(_return, rORAMIndex, location_list, startLeaf, blocknum);
    }
    ifaces_[i]->edge_fetch_by_locations(_return, rORAMIndex, location_list, startLeaf, blocknum);
    return;
  }

  int32_t edge_upload_by_locations(const int32_t rORAMIndex, const std::vector<tFullBlockContent> & block_content_list, const int32_t startLeaf, const int32_t blocknum) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->edge_upload_by_locations(rORAMIndex, block_content_list, startLeaf, blocknum);
    }
    return ifaces_[i]->edge_upload_by_locations(rORAMIndex, block_content_list, startLeaf, blocknum);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class EdgeServerConcurrentClient : virtual public EdgeServerIf {
 public:
  EdgeServerConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  EdgeServerConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void send_data_message(const std::string& data_message);
  void send_send_data_message(const std::string& data_message);
  int32_t setup_rORAM_Stash(const int32_t rORAMIndex, const int32_t stashSize, const int32_t rangeSupport);
  int32_t send_setup_rORAM_Stash(const int32_t rORAMIndex, const int32_t stashSize, const int32_t rangeSupport);
  int32_t recv_setup_rORAM_Stash(const int32_t seqid);
  int32_t stash_upload_by_oram_index(const int32_t rORAMIndex, const std::vector<tFullBlockContent> & block_content_list, const int32_t blocknum);
  int32_t send_stash_upload_by_oram_index(const int32_t rORAMIndex, const std::vector<tFullBlockContent> & block_content_list, const int32_t blocknum);
  int32_t recv_stash_upload_by_oram_index(const int32_t seqid);
  void stash_fetch_by_locations(std::vector<tFullBlockContent> & _return, const int32_t rORAMIndex, const std::vector<tPhysicalLocation> & location_list, const int32_t blocknum);
  int32_t send_stash_fetch_by_locations(const int32_t rORAMIndex, const std::vector<tPhysicalLocation> & location_list, const int32_t blocknum);
  void recv_stash_fetch_by_locations(std::vector<tFullBlockContent> & _return, const int32_t seqid);
  void edge_fetch_by_locations(std::vector<tFullBlockContent> & _return, const int32_t rORAMIndex, const std::vector<tPhysicalLocation> & location_list, const int32_t startLeaf, const int32_t blocknum);
  int32_t send_edge_fetch_by_locations(const int32_t rORAMIndex, const std::vector<tPhysicalLocation> & location_list, const int32_t startLeaf, const int32_t blocknum);
  void recv_edge_fetch_by_locations(std::vector<tFullBlockContent> & _return, const int32_t seqid);
  int32_t edge_upload_by_locations(const int32_t rORAMIndex, const std::vector<tFullBlockContent> & block_content_list, const int32_t startLeaf, const int32_t blocknum);
  int32_t send_edge_upload_by_locations(const int32_t rORAMIndex, const std::vector<tFullBlockContent> & block_content_list, const int32_t startLeaf, const int32_t blocknum);
  int32_t recv_edge_upload_by_locations(const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
